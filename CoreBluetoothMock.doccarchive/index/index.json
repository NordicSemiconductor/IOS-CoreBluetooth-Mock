{"includedArchiveIdentifiers":["org.cocoapods.CoreBluetoothMock"],"interfaceLanguages":{"occ":[{"children":[{"title":"How to migrate a project to CoreBluetooth Mock framework","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/migration-guide","title":"Migration guide","type":"article"},{"title":"How to create mock peripherals","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/mocking-peripherals","title":"Mocking Bluetooth LE Devices","type":"article"},{"title":"How to simulate test events","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/simulation","title":"Simulation","type":"article"},{"title":"Known issues","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/knownissues","title":"Known issues","type":"article"},{"title":"Central Manager","type":"groupMarker"},{"children":[{"title":"Scanning or Stopping Scans of Peripherals","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanager\/isscanning","title":"isScanning","type":"property"}],"path":"\/documentation\/corebluetoothmock\/cbmcentralmanager","title":"CBMCentralManager","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy\/init","title":"init","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy","title":"CBMCentralManagerDelegateProxy","type":"class"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock","title":"CBMCentralManagerMock","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagernative\/isscanning","title":"isScanning","type":"property"}],"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagernative","title":"CBMCentralManagerNative","type":"class"},{"title":"Peripheral","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmpeer\/init","title":"init","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmpeer","title":"CBMPeer","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/init","title":"init","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy","title":"CBMPeripheralDelegateProxy","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxywithl2capchannel\/init","title":"init","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxywithl2capchannel","title":"CBMPeripheralDelegateProxyWithL2CAPChannel","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/debugdescription","title":"debugDescription","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/hash","title":"hash","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/state","title":"state","type":"property"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock","title":"CBMPeripheralMock","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/debugdescription","title":"debugDescription","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/hash","title":"hash","type":"property"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative","title":"CBMPeripheralNative","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview\/state","title":"state","type":"property"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview","title":"CBMPeripheralPreview","type":"class"},{"title":"Attributes","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmattribute\/init","title":"init","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmattribute","title":"CBMAttribute","type":"class"},{"path":"\/documentation\/corebluetoothmock\/cbmservice","title":"CBMService","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmservicemock\/isequal(_:)","title":"isEqual:","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmservicemock","title":"CBMServiceMock","type":"class"},{"path":"\/documentation\/corebluetoothmock\/cbmcharacteristic","title":"CBMCharacteristic","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcharacteristicmock\/isequal(_:)","title":"isEqual:","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmcharacteristicmock","title":"CBMCharacteristicMock","type":"class"},{"path":"\/documentation\/corebluetoothmock\/cbmdescriptor","title":"CBMDescriptor","type":"class"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmdescriptormock\/isequal(_:)","title":"isEqual:","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmdescriptormock","title":"CBMDescriptorMock","type":"class"},{"path":"\/documentation\/corebluetoothmock\/cbmclientcharacteristicconfigurationdescriptormock","title":"CBMClientCharacteristicConfigurationDescriptorMock","type":"class"},{"title":"Variables","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/corebluetoothmockversionnumber","title":"CoreBluetoothMockVersionNumber","type":"var"},{"path":"\/documentation\/corebluetoothmock\/corebluetoothmockversionstring","title":"CoreBluetoothMockVersionString","type":"var"}],"path":"\/documentation\/corebluetoothmock","title":"CoreBluetoothMock","type":"module"}],"swift":[{"children":[{"title":"How to migrate a project to CoreBluetooth Mock framework","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/migration-guide","title":"Migration guide","type":"article"},{"title":"How to create mock peripherals","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/mocking-peripherals","title":"Mocking Bluetooth LE Devices","type":"article"},{"title":"How to simulate test events","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/simulation","title":"Simulation","type":"article"},{"title":"Known issues","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/knownissues","title":"Known issues","type":"article"},{"title":"Mocking Bluetooth LE Devices","type":"groupMarker"},{"children":[{"title":"Initialization","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/simulateperipheral(identifier:proximity:)","title":"static func simulatePeripheral(identifier: UUID, proximity: CBMProximity) -> Builder","type":"method"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/builder\/advertising(advertisementdata:withinterval:delay:alsowhenconnected:)","title":"func advertising(advertisementData: [String : Any], withInterval: TimeInterval, delay: TimeInterval, alsoWhenConnected: Bool) -> Builder","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/builder\/allowforretrieval()","title":"func allowForRetrieval() -> Builder","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/builder\/build()","title":"func build() -> CBMPeripheralSpec","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/builder\/connectable(name:services:delegate:connectioninterval:supervisiontimeout:mtu:)","title":"func connectable(name: String, services: [CBMServiceMock], delegate: CBMPeripheralSpecDelegate?, connectionInterval: TimeInterval, supervisionTimeout: TimeInterval, mtu: Int) -> Builder","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/builder\/connected(name:services:delegate:connectioninterval:supervisiontimeout:mtu:)","title":"func connected(name: String, services: [CBMServiceMock], delegate: CBMPeripheralSpecDelegate?, connectionInterval: TimeInterval, supervisionTimeout: TimeInterval, mtu: Int) -> Builder","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/builder","title":"CBMPeripheralSpec.Builder","type":"class"},{"title":"Simulation Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/simulateproximitychange(_:)","title":"func simulateProximityChange(CBMProximity)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/simulatevalueupdate(_:for:)","title":"func simulateValueUpdate(Data, for: CBMCharacteristicMock)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/simulateadvertisementchange(_:)","title":"func simulateAdvertisementChange([CBMAdvertisementConfig]?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/simulatedisconnection(witherror:)","title":"func simulateDisconnection(withError: Error)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/simulatereset()","title":"func simulateReset()","type":"method"},{"title":"Advanced","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/simulateconnection()","title":"func simulateConnection()","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/simulatecaching()","title":"func simulateCaching()","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/simulatemacchange(_:)","title":"func simulateMacChange(UUID)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/simulateservicechange(newname:newservices:)","title":"func simulateServiceChange(newName: String?, newServices: [CBMServiceMock])","type":"method"},{"title":"Properties","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/name","title":"var name: String?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/mtu","title":"let mtu: Int?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/advertisement","title":"var advertisement: [CBMAdvertisementConfig]?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/identifier","title":"var identifier: UUID","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/proximity","title":"var proximity: CBMProximity","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/isconnected","title":"var isConnected: Bool","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/connectiondelegate","title":"let connectionDelegate: CBMPeripheralSpecDelegate?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/connectioninterval","title":"let connectionInterval: TimeInterval?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/supervisiontimeout","title":"let supervisionTimeout: TimeInterval?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/isknown","title":"var isKnown: Bool","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/services","title":"var services: [CBMServiceMock]?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/==(_:_:)","title":"static func == (CBMPeripheralSpec, CBMPeripheralSpec) -> Bool","type":"op"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralspec","title":"CBMPeripheralSpec","type":"class"},{"children":[{"title":"Handling Connection Events","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheraldidreceiveconnectionrequest(_:)-2bpww","title":"func peripheralDidReceiveConnectionRequest(CBMPeripheralSpec) -> Result<Void, Error>","type":"method"}],"title":"CBMPeripheralSpecDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheraldidreceiveconnectionrequest(_:)-6eqgz","title":"func peripheralDidReceiveConnectionRequest(CBMPeripheralSpec) -> Result<Void, Error>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:diddisconnect:)-9slvl","title":"func peripheral(CBMPeripheralSpec, didDisconnect: Error?)","type":"method"}],"title":"CBMPeripheralSpecDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:diddisconnect:)-37v65","title":"func peripheral(CBMPeripheralSpec, didDisconnect: Error?)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/reset()-8n6fz","title":"func reset()","type":"method"}],"title":"CBMPeripheralSpecDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/reset()-7utrg","title":"func reset()","type":"method"},{"title":"Handling Service Discovery","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceiveservicediscoveryrequest:)-1p1el","title":"func peripheral(CBMPeripheralSpec, didReceiveServiceDiscoveryRequest: [CBMUUID]?) -> Result<Void, Error>","type":"method"}],"title":"CBMPeripheralSpecDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceiveservicediscoveryrequest:)-pq5f","title":"func peripheral(CBMPeripheralSpec, didReceiveServiceDiscoveryRequest: [CBMUUID]?) -> Result<Void, Error>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceiveincludedservicediscoveryrequest:for:)-7iofs","title":"func peripheral(CBMPeripheralSpec, didReceiveIncludedServiceDiscoveryRequest: [CBMUUID]?, for: CBMServiceMock) -> Result<Void, Error>","type":"method"}],"title":"CBMPeripheralSpecDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceiveincludedservicediscoveryrequest:for:)-4mqk2","title":"func peripheral(CBMPeripheralSpec, didReceiveIncludedServiceDiscoveryRequest: [CBMUUID]?, for: CBMServiceMock) -> Result<Void, Error>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceivecharacteristicsdiscoveryrequest:for:)-995x5","title":"func peripheral(CBMPeripheralSpec, didReceiveCharacteristicsDiscoveryRequest: [CBMUUID]?, for: CBMServiceMock) -> Result<Void, Error>","type":"method"}],"title":"CBMPeripheralSpecDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceivecharacteristicsdiscoveryrequest:for:)-2doal","title":"func peripheral(CBMPeripheralSpec, didReceiveCharacteristicsDiscoveryRequest: [CBMUUID]?, for: CBMServiceMock) -> Result<Void, Error>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceivedescriptorsdiscoveryrequestfor:)-2baav","title":"func peripheral(CBMPeripheralSpec, didReceiveDescriptorsDiscoveryRequestFor: CBMCharacteristicMock) -> Result<Void, Error>","type":"method"}],"title":"CBMPeripheralSpecDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceivedescriptorsdiscoveryrequestfor:)-6rk13","title":"func peripheral(CBMPeripheralSpec, didReceiveDescriptorsDiscoveryRequestFor: CBMCharacteristicMock) -> Result<Void, Error>","type":"method"},{"title":"Handling Requests","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceivereadrequestfor:)-6tewg","title":"func peripheral(CBMPeripheralSpec, didReceiveReadRequestFor: CBMCharacteristicMock) -> Result<Data, Error>","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceivereadrequestfor:)-5c1ls","title":"func peripheral(CBMPeripheralSpec, didReceiveReadRequestFor: CBMDescriptorMock) -> Result<Data, Error>","type":"method"}],"title":"CBMPeripheralSpecDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceivereadrequestfor:)-9ybod","title":"func peripheral(CBMPeripheralSpec, didReceiveReadRequestFor: CBMCharacteristicMock) -> Result<Data, Error>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceivereadrequestfor:)-5c1ls","title":"func peripheral(CBMPeripheralSpec, didReceiveReadRequestFor: CBMDescriptorMock) -> Result<Data, Error>","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceivereadrequestfor:)-6tewg","title":"func peripheral(CBMPeripheralSpec, didReceiveReadRequestFor: CBMCharacteristicMock) -> Result<Data, Error>","type":"method"}],"title":"CBMPeripheralSpecDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceivereadrequestfor:)-7sk6x","title":"func peripheral(CBMPeripheralSpec, didReceiveReadRequestFor: CBMDescriptorMock) -> Result<Data, Error>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceivewritecommandfor:data:)-2v5ht","title":"func peripheral(CBMPeripheralSpec, didReceiveWriteCommandFor: CBMCharacteristicMock, data: Data)","type":"method"}],"title":"CBMPeripheralSpecDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceivewritecommandfor:data:)-58pcn","title":"func peripheral(CBMPeripheralSpec, didReceiveWriteCommandFor: CBMCharacteristicMock, data: Data)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceivewriterequestfor:data:)-75hfw","title":"func peripheral(CBMPeripheralSpec, didReceiveWriteRequestFor: CBMDescriptorMock, data: Data) -> Result<Void, Error>","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceivewriterequestfor:data:)-23hwi","title":"func peripheral(CBMPeripheralSpec, didReceiveWriteRequestFor: CBMCharacteristicMock, data: Data) -> Result<Void, Error>","type":"method"}],"title":"CBMPeripheralSpecDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceivewriterequestfor:data:)-yspa","title":"func peripheral(CBMPeripheralSpec, didReceiveWriteRequestFor: CBMCharacteristicMock, data: Data) -> Result<Void, Error>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceivewriterequestfor:data:)-75hfw","title":"func peripheral(CBMPeripheralSpec, didReceiveWriteRequestFor: CBMDescriptorMock, data: Data) -> Result<Void, Error>","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceivewriterequestfor:data:)-23hwi","title":"func peripheral(CBMPeripheralSpec, didReceiveWriteRequestFor: CBMCharacteristicMock, data: Data) -> Result<Void, Error>","type":"method"}],"title":"CBMPeripheralSpecDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceivewriterequestfor:data:)-81sdk","title":"func peripheral(CBMPeripheralSpec, didReceiveWriteRequestFor: CBMDescriptorMock, data: Data) -> Result<Void, Error>","type":"method"},{"title":"Handling Notifications","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceivesetnotifyrequest:for:)-6yb1i","title":"func peripheral(CBMPeripheralSpec, didReceiveSetNotifyRequest: Bool, for: CBMCharacteristicMock) -> Result<Void, Error>","type":"method"}],"title":"CBMPeripheralSpecDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didreceivesetnotifyrequest:for:)-9r03q","title":"func peripheral(CBMPeripheralSpec, didReceiveSetNotifyRequest: Bool, for: CBMCharacteristicMock) -> Result<Void, Error>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didupdatenotificationstatefor:error:)-nipu","title":"func peripheral(CBMPeripheralSpec, didUpdateNotificationStateFor: CBMCharacteristicMock, error: Error?)","type":"method"}],"title":"CBMPeripheralSpecDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate\/peripheral(_:didupdatenotificationstatefor:error:)-4aash","title":"func peripheral(CBMPeripheralSpec, didUpdateNotificationStateFor: CBMCharacteristicMock, error: Error?)","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralspecdelegate","title":"CBMPeripheralSpecDelegate","type":"protocol"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmproximity\/far","title":"case far","type":"case"},{"path":"\/documentation\/corebluetoothmock\/cbmproximity\/immediate","title":"case immediate","type":"case"},{"path":"\/documentation\/corebluetoothmock\/cbmproximity\/near","title":"case near","type":"case"},{"path":"\/documentation\/corebluetoothmock\/cbmproximity\/outofrange","title":"case outOfRange","type":"case"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmproximity\/deviation\/custom(_:)","title":"case custom(Int)","type":"case"},{"path":"\/documentation\/corebluetoothmock\/cbmproximity\/deviation\/default","title":"case `default`","type":"case"},{"path":"\/documentation\/corebluetoothmock\/cbmproximity\/deviation\/none","title":"case none","type":"case"}],"path":"\/documentation\/corebluetoothmock\/cbmproximity\/deviation","title":"CBMProximity.Deviation","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmproximity\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/corebluetoothmock\/cbmproximity\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/corebluetoothmock\/cbmproximity","title":"CBMProximity","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmadvertisementconfig\/init(data:interval:delay:isadvertisingwhenconnected:)","title":"init(data: [String : Any], interval: TimeInterval, delay: TimeInterval, isAdvertisingWhenConnected: Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmadvertisementconfig\/data","title":"let data: [String : Any]","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmadvertisementconfig\/delay","title":"let delay: TimeInterval","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmadvertisementconfig\/interval","title":"let interval: TimeInterval","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmadvertisementconfig\/isadvertisingwhenconnected","title":"let isAdvertisingWhenConnected: Bool","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmadvertisementconfig\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/corebluetoothmock\/cbmadvertisementconfig\/==(_:_:)","title":"static func == (CBMAdvertisementConfig, CBMAdvertisementConfig) -> Bool","type":"op"}],"path":"\/documentation\/corebluetoothmock\/cbmadvertisementconfig\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmadvertisementconfig\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmadvertisementconfig\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/corebluetoothmock\/cbmadvertisementconfig","title":"CBMAdvertisementConfig","type":"struct"},{"title":"Central Manager","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerfactory\/instance(delegate:queue:forcemock:)","title":"static func instance(delegate: CBMCentralManagerDelegate?, queue: DispatchQueue?, forceMock: Bool) -> CBMCentralManager","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerfactory\/instance(delegate:queue:options:forcemock:)","title":"static func instance(delegate: CBMCentralManagerDelegate?, queue: DispatchQueue?, options: [String : Any]?, forceMock: Bool) -> CBMCentralManager","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerfactory\/instance(forcemock:)","title":"static func instance(forceMock: Bool) -> CBMCentralManager","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerfactory","title":"CBMCentralManagerFactory","type":"class"},{"children":[{"title":"Initialization","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanager\/init(_:)","title":"init(Bool)","type":"init"},{"title":"Establishing or Canceling Connections with Peripherals","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanager\/connect(_:options:)","title":"func connect(CBMPeripheral, options: [String : Any]?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanager\/cancelperipheralconnection(_:)","title":"func cancelPeripheralConnection(CBMPeripheral)","type":"method"},{"title":"Retrieving Lists of Peripherals","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanager\/retrieveconnectedperipherals(withservices:)","title":"func retrieveConnectedPeripherals(withServices: [CBMUUID]) -> [CBMPeripheral]","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanager\/retrieveperipherals(withidentifiers:)","title":"func retrievePeripherals(withIdentifiers: [UUID]) -> [CBMPeripheral]","type":"method"},{"title":"Scanning or Stopping Scans of Peripherals","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanager\/scanforperipherals(withservices:options:)","title":"func scanForPeripherals(withServices: [CBMUUID]?, options: [String : Any]?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanager\/stopscan()","title":"func stopScan()","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanager\/isscanning","title":"var isScanning: Bool","type":"property"},{"title":"Inspecting Feature Support","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanager\/supports(_:)","title":"class func supports(CBMCentralManager.Feature) -> Bool","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanager\/feature","title":"CBMCentralManager.Feature","type":"typealias"},{"title":"Monitoring Properties","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanager\/delegate","title":"var delegate: CBMCentralManagerDelegate?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanager\/state","title":"var state: CBMManagerState","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanager\/authorization-swift.type.property","title":"class var authorization: CBMManagerAuthorization","type":"property"},{"title":"Receiving Connection Events","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanager\/registerforconnectionevents(options:)","title":"func registerForConnectionEvents(options: [CBMConnectionEventMatchingOption : Any]?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmconnectionevent","title":"CBMConnectionEvent","type":"typealias"},{"path":"\/documentation\/corebluetoothmock\/cbmconnectioneventmatchingoption","title":"CBMConnectionEventMatchingOption","type":"typealias"},{"title":"Deprecated","type":"groupMarker"},{"deprecated":true,"path":"\/documentation\/corebluetoothmock\/cbmcentralmanager\/authorization-swift.property","title":"var authorization: CBMManagerAuthorization","type":"property"}],"path":"\/documentation\/corebluetoothmock\/cbmcentralmanager","title":"CBMCentralManager","type":"class"},{"children":[{"title":"Initialization","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegate\/centralmanagerdidupdatestate(_:)","title":"func centralManagerDidUpdateState(CBMCentralManager)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegate\/centralmanager(_:willrestorestate:)-4zyhg","title":"func centralManager(CBMCentralManager, willRestoreState: [String : Any])","type":"method"}],"title":"CBMCentralManagerDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegate\/centralmanager(_:willrestorestate:)-9qavl","title":"func centralManager(CBMCentralManager, willRestoreState: [String : Any])","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegate\/centralmanager(_:didupdateancsauthorizationfor:)-8t3sl","title":"func centralManager(CBMCentralManager, didUpdateANCSAuthorizationFor: CBMPeripheral)","type":"method"}],"title":"CBMCentralManagerDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegate\/centralmanager(_:didupdateancsauthorizationfor:)-6msdh","title":"func centralManager(CBMCentralManager, didUpdateANCSAuthorizationFor: CBMPeripheral)","type":"method"},{"title":"Scanning","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegate\/centralmanager(_:diddiscover:advertisementdata:rssi:)-9oxtp","title":"func centralManager(CBMCentralManager, didDiscover: CBMPeripheral, advertisementData: [String : Any], rssi: NSNumber)","type":"method"}],"title":"CBMCentralManagerDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegate\/centralmanager(_:diddiscover:advertisementdata:rssi:)-oz3n","title":"func centralManager(CBMCentralManager, didDiscover: CBMPeripheral, advertisementData: [String : Any], rssi: NSNumber)","type":"method"},{"title":"Connection","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegate\/centralmanager(_:didconnect:)-6tlfh","title":"func centralManager(CBMCentralManager, didConnect: CBMPeripheral)","type":"method"}],"title":"CBMCentralManagerDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegate\/centralmanager(_:didconnect:)-p052","title":"func centralManager(CBMCentralManager, didConnect: CBMPeripheral)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegate\/centralmanager(_:didfailtoconnect:error:)-9sppj","title":"func centralManager(CBMCentralManager, didFailToConnect: CBMPeripheral, error: Error?)","type":"method"}],"title":"CBMCentralManagerDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegate\/centralmanager(_:didfailtoconnect:error:)-2h1bb","title":"func centralManager(CBMCentralManager, didFailToConnect: CBMPeripheral, error: Error?)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegate\/centralmanager(_:diddisconnectperipheral:error:)-1j8c2","title":"func centralManager(CBMCentralManager, didDisconnectPeripheral: CBMPeripheral, error: Error?)","type":"method"}],"title":"CBMCentralManagerDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegate\/centralmanager(_:diddisconnectperipheral:error:)-1lv48","title":"func centralManager(CBMCentralManager, didDisconnectPeripheral: CBMPeripheral, error: Error?)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegate\/centralmanager(_:diddisconnectperipheral:timestamp:isreconnecting:error:)-305ej","title":"func centralManager(CBMCentralManager, didDisconnectPeripheral: CBMPeripheral, timestamp: CFAbsoluteTime, isReconnecting: Bool, error: (any Error)?)","type":"method"}],"title":"CBMCentralManagerDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegate\/centralmanager(_:diddisconnectperipheral:timestamp:isreconnecting:error:)-52f9c","title":"func centralManager(CBMCentralManager, didDisconnectPeripheral: CBMPeripheral, timestamp: CFAbsoluteTime, isReconnecting: Bool, error: (any Error)?)","type":"method"},{"title":"Registering for connection events","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegate\/centralmanager(_:connectioneventdidoccur:for:)-3pqer","title":"func centralManager(CBMCentralManager, connectionEventDidOccur: CBMConnectionEvent, for: CBMPeripheral)","type":"method"}],"title":"CBMCentralManagerDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegate\/centralmanager(_:connectioneventdidoccur:for:)-1ay8d","title":"func centralManager(CBMCentralManager, connectionEventDidOccur: CBMConnectionEvent, for: CBMPeripheral)","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegate","title":"CBMCentralManagerDelegate","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy\/connectioneventdidoccur","title":"var connectionEventDidOccur: ((CBMCentralManager, CBMConnectionEvent, CBMPeripheral) -> ())?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy\/didconnect","title":"var didConnect: ((CBMCentralManager, CBMPeripheral) -> ())?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy\/diddisconnect","title":"var didDisconnect: ((CBMCentralManager, CBMPeripheral, CFAbsoluteTime, Bool, Error?) -> ())?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy\/diddiscoverperipheral","title":"var didDiscoverPeripheral: ((CBMCentralManager, CBMPeripheral, [String : Any], NSNumber) -> ())?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy\/didfailtoconnect","title":"var didFailToConnect: ((CBMCentralManager, CBMPeripheral, Error?) -> ())?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy\/didupdateancsauthorization","title":"var didUpdateANCSAuthorization: ((CBMCentralManager, CBMPeripheral) -> ())?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy\/didupdatestate","title":"var didUpdateState: ((CBMCentralManager) -> ())?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy\/willrestorestate","title":"var willRestoreState: ((CBMCentralManager, [String : Any]) -> ())?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy\/centralmanager(_:connectioneventdidoccur:for:)-1udd0","title":"func centralManager(CBMCentralManager, connectionEventDidOccur: CBMConnectionEvent, for: CBMPeripheral)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy\/centralmanager(_:didconnect:)","title":"func centralManager(CBMCentralManager, didConnect: CBMPeripheral)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy\/centralmanager(_:diddisconnectperipheral:error:)","title":"func centralManager(CBMCentralManager, didDisconnectPeripheral: CBMPeripheral, error: Error?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy\/centralmanager(_:diddisconnectperipheral:timestamp:isreconnecting:error:)","title":"func centralManager(CBMCentralManager, didDisconnectPeripheral: CBMPeripheral, timestamp: CFAbsoluteTime, isReconnecting: Bool, error: (any Error)?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy\/centralmanager(_:diddiscover:advertisementdata:rssi:)","title":"func centralManager(CBMCentralManager, didDiscover: CBMPeripheral, advertisementData: [String : Any], rssi: NSNumber)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy\/centralmanager(_:didfailtoconnect:error:)","title":"func centralManager(CBMCentralManager, didFailToConnect: CBMPeripheral, error: Error?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy\/centralmanager(_:didupdateancsauthorizationfor:)-354n3","title":"func centralManager(CBMCentralManager, didUpdateANCSAuthorizationFor: CBMPeripheral)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy\/centralmanager(_:willrestorestate:)","title":"func centralManager(CBMCentralManager, willRestoreState: [String : Any])","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy\/centralmanagerdidupdatestate(_:)","title":"func centralManagerDidUpdateState(CBMCentralManager)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy\/centralmanager(_:connectioneventdidoccur:for:)-1g05k","title":"func centralManager(CBMCentralManager, connectionEventDidOccur: CBMConnectionEvent, for: CBMPeripheral)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy\/centralmanager(_:didupdateancsauthorizationfor:)-2ol7m","title":"func centralManager(CBMCentralManager, didUpdateANCSAuthorizationFor: CBMPeripheral)","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy\/cbmcentralmanagerdelegate-implementations","title":"CBMCentralManagerDelegate Implementations","type":"symbol"}],"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerdelegateproxy","title":"CBMCentralManagerDelegateProxy","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock\/init()","title":"init()","type":"init"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock\/init(delegate:queue:)","title":"init(delegate: CBMCentralManagerDelegate?, queue: DispatchQueue?)","type":"init"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock\/init(delegate:queue:options:)","title":"init(delegate: CBMCentralManagerDelegate?, queue: DispatchQueue?, options: [String : Any]?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"deprecated":true,"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock\/authorization-swift.property","title":"var authorization: CBMManagerAuthorization","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock\/state","title":"var state: CBMManagerState","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock\/cancelperipheralconnection(_:)","title":"func cancelPeripheralConnection(CBMPeripheral)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock\/connect(_:options:)","title":"func connect(CBMPeripheral, options: [String : Any]?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock\/registerforconnectionevents(options:)","title":"func registerForConnectionEvents(options: [CBMConnectionEventMatchingOption : Any]?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock\/retrieveconnectedperipherals(withservices:)","title":"func retrieveConnectedPeripherals(withServices: [CBMUUID]) -> [CBMPeripheral]","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock\/retrieveperipherals(withidentifiers:)","title":"func retrievePeripherals(withIdentifiers: [UUID]) -> [CBMPeripheral]","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock\/scanforperipherals(withservices:options:)","title":"func scanForPeripherals(withServices: [CBMUUID]?, options: [String : Any]?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock\/stopscan()","title":"func stopScan()","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock\/authorization-swift.type.property","title":"class var authorization: CBMManagerAuthorization","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock\/simulatefeaturessupport","title":"static var simulateFeaturesSupport: ((_ features: CBMCentralManager.Feature) -> Bool)?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock\/simulatestaterestoration","title":"static var simulateStateRestoration: ((_ identifierKey: String) -> [String : Any]?)?","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock\/simulateauthorization(_:)","title":"static func simulateAuthorization(CBMManagerAuthorization)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock\/simulateinitialstate(_:)","title":"static func simulateInitialState(CBMManagerState)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock\/simulateperipherals(_:)","title":"static func simulatePeripherals([CBMPeripheralSpec])","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock\/simulatepoweroff()","title":"static func simulatePowerOff()","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock\/simulatepoweron()","title":"static func simulatePowerOn()","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock\/simulaterssideviation(_:)","title":"static func simulateRSSIDeviation(CBMProximity.Deviation)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock\/teardownsimulation()","title":"static func tearDownSimulation()","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagermock","title":"CBMCentralManagerMock","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagernative\/init()","title":"init()","type":"init"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagernative\/init(delegate:queue:)","title":"init(delegate: CBMCentralManagerDelegate?, queue: DispatchQueue?)","type":"init"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagernative\/init(delegate:queue:options:)","title":"init(delegate: CBMCentralManagerDelegate?, queue: DispatchQueue?, options: [String : Any]?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"deprecated":true,"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagernative\/authorization-swift.property","title":"var authorization: CBMManagerAuthorization","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagernative\/isscanning","title":"var isScanning: Bool","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagernative\/state","title":"var state: CBMManagerState","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagernative\/cancelperipheralconnection(_:)","title":"func cancelPeripheralConnection(CBMPeripheral)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagernative\/connect(_:options:)","title":"func connect(CBMPeripheral, options: [String : Any]?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagernative\/registerforconnectionevents(options:)","title":"func registerForConnectionEvents(options: [CBMConnectionEventMatchingOption : Any]?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagernative\/retrieveconnectedperipherals(withservices:)","title":"func retrieveConnectedPeripherals(withServices: [CBMUUID]) -> [CBMPeripheral]","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagernative\/retrieveperipherals(withidentifiers:)","title":"func retrievePeripherals(withIdentifiers: [UUID]) -> [CBMPeripheral]","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagernative\/scanforperipherals(withservices:options:)","title":"func scanForPeripherals(withServices: [CBMUUID]?, options: [String : Any]?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagernative\/stopscan()","title":"func stopScan()","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagernative\/authorization-swift.type.property","title":"class var authorization: CBMManagerAuthorization","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagernative\/supports(_:)","title":"class func supports(CBMCentralManager.Feature) -> Bool","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagernative","title":"CBMCentralManagerNative","type":"class"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmmanagerstate\/poweredoff","title":"case poweredOff","type":"case"},{"path":"\/documentation\/corebluetoothmock\/cbmmanagerstate\/poweredon","title":"case poweredOn","type":"case"},{"path":"\/documentation\/corebluetoothmock\/cbmmanagerstate\/resetting","title":"case resetting","type":"case"},{"path":"\/documentation\/corebluetoothmock\/cbmmanagerstate\/unauthorized","title":"case unauthorized","type":"case"},{"path":"\/documentation\/corebluetoothmock\/cbmmanagerstate\/unknown","title":"case unknown","type":"case"},{"path":"\/documentation\/corebluetoothmock\/cbmmanagerstate\/unsupported","title":"case unsupported","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmmanagerstate\/init(rawvalue:)","title":"init?(rawValue: Int)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmmanagerstate\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/corebluetoothmock\/cbmmanagerstate\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmmanagerstate\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmmanagerstate\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmmanagerstate\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/corebluetoothmock\/cbmmanagerstate","title":"CBMManagerState","type":"enum"},{"path":"\/documentation\/corebluetoothmock\/cbmmanagerauthorization","title":"CBMManagerAuthorization","type":"typealias"},{"title":"Central Manager Initialization Options","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanageroptionrestoreidentifierkey","title":"let CBMCentralManagerOptionRestoreIdentifierKey: String","type":"var"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanageroptionshowpoweralertkey","title":"let CBMCentralManagerOptionShowPowerAlertKey: String","type":"var"},{"title":"Central Manager State Restoration Options","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerrestoredstateperipheralskey","title":"let CBMCentralManagerRestoredStatePeripheralsKey: String","type":"var"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerrestoredstatescanserviceskey","title":"let CBMCentralManagerRestoredStateScanServicesKey: String","type":"var"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerrestoredstatescanoptionskey","title":"let CBMCentralManagerRestoredStateScanOptionsKey: String","type":"var"},{"title":"Peripheral","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmpeer","title":"CBMPeer","type":"class"},{"children":[{"title":"Identifying a Peripheral","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheral\/identifier","title":"var identifier: UUID","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheral\/name","title":"var name: String?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheral\/delegate","title":"var delegate: CBMPeripheralDelegate?","type":"property"},{"title":"Discovering Services","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheral\/discoverservices(_:)","title":"func discoverServices([CBMUUID]?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheral\/discoverincludedservices(_:for:)","title":"func discoverIncludedServices([CBMUUID]?, for: CBMService)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheral\/services","title":"var services: [CBMService]?","type":"property"},{"title":"Discovering Characteristics and Descriptors","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheral\/discovercharacteristics(_:for:)","title":"func discoverCharacteristics([CBMUUID]?, for: CBMService)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheral\/discoverdescriptors(for:)","title":"func discoverDescriptors(for: CBMCharacteristic)","type":"method"},{"title":"Reading Characteristic and Descriptor Values","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheral\/readvalue(for:)-1hqxp","title":"func readValue(for: CBMCharacteristic)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheral\/readvalue(for:)-3xyb1","title":"func readValue(for: CBMDescriptor)","type":"method"},{"title":"Writing Characteristic and Descriptor Values","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheral\/writevalue(_:for:type:)","title":"func writeValue(Data, for: CBMCharacteristic, type: CBMCharacteristicWriteType)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheral\/writevalue(_:for:)","title":"func writeValue(Data, for: CBMDescriptor)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheral\/maximumwritevaluelength(for:)","title":"func maximumWriteValueLength(for: CBMCharacteristicWriteType) -> Int","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmcharacteristicwritetype","title":"CBMCharacteristicWriteType","type":"typealias"},{"title":"Setting Notifications for a Characteristic’s Value","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheral\/setnotifyvalue(_:for:)","title":"func setNotifyValue(Bool, for: CBMCharacteristic)","type":"method"},{"title":"Monitoring a Peripheral’s Connection State","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheral\/state","title":"var state: CBMPeripheralState","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralstate","title":"CBMPeripheralState","type":"typealias"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheral\/cansendwritewithoutresponse","title":"var canSendWriteWithoutResponse: Bool","type":"property"},{"title":"Accessing a Peripheral’s Signal Strength","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheral\/readrssi()","title":"func readRSSI()","type":"method"},{"title":"Working with L2CAP Channels","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheral\/openl2capchannel(_:)","title":"func openL2CAPChannel(CBML2CAPPSM)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbml2cappsm","title":"CBML2CAPPSM","type":"typealias"},{"path":"\/documentation\/corebluetoothmock\/cbml2capchannel","title":"CBML2CAPChannel","type":"typealias"},{"title":"Working with Apple Notification Center Service (ANCS)","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheral\/ancsauthorized","title":"var ancsAuthorized: Bool","type":"property"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheral","title":"CBMPeripheral","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:diddiscovercharacteristicsfor:error:)-1kooc","title":"func peripheral(CBMPeripheral, didDiscoverCharacteristicsFor: CBMService, error: Error?)","type":"method"}],"title":"CBMPeripheralDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:diddiscovercharacteristicsfor:error:)-2pyjk","title":"func peripheral(CBMPeripheral, didDiscoverCharacteristicsFor: CBMService, error: Error?)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:diddiscoverdescriptorsfor:error:)-8554j","title":"func peripheral(CBMPeripheral, didDiscoverDescriptorsFor: CBMCharacteristic, error: Error?)","type":"method"}],"title":"CBMPeripheralDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:diddiscoverdescriptorsfor:error:)-240qo","title":"func peripheral(CBMPeripheral, didDiscoverDescriptorsFor: CBMCharacteristic, error: Error?)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:diddiscoverincludedservicesfor:error:)-g4lr","title":"func peripheral(CBMPeripheral, didDiscoverIncludedServicesFor: CBMService, error: Error?)","type":"method"}],"title":"CBMPeripheralDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:diddiscoverincludedservicesfor:error:)-6b62q","title":"func peripheral(CBMPeripheral, didDiscoverIncludedServicesFor: CBMService, error: Error?)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:diddiscoverservices:)-7annk","title":"func peripheral(CBMPeripheral, didDiscoverServices: Error?)","type":"method"}],"title":"CBMPeripheralDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:diddiscoverservices:)-6mi4k","title":"func peripheral(CBMPeripheral, didDiscoverServices: Error?)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:didmodifyservices:)-1pvuz","title":"func peripheral(CBMPeripheral, didModifyServices: [CBMService])","type":"method"}],"title":"CBMPeripheralDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:didmodifyservices:)-9i6xy","title":"func peripheral(CBMPeripheral, didModifyServices: [CBMService])","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:didopen:error:)-tise","title":"func peripheral(CBMPeripheral, didOpen: CBML2CAPChannel?, error: Error?)","type":"method"}],"title":"CBMPeripheralDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:didopen:error:)-8ac1d","title":"func peripheral(CBMPeripheral, didOpen: CBML2CAPChannel?, error: Error?)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:didreadrssi:error:)-7xmo2","title":"func peripheral(CBMPeripheral, didReadRSSI: NSNumber, error: Error?)","type":"method"}],"title":"CBMPeripheralDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:didreadrssi:error:)-7zu2o","title":"func peripheral(CBMPeripheral, didReadRSSI: NSNumber, error: Error?)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:didupdatenotificationstatefor:error:)-5tl1y","title":"func peripheral(CBMPeripheral, didUpdateNotificationStateFor: CBMCharacteristic, error: Error?)","type":"method"}],"title":"CBMPeripheralDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:didupdatenotificationstatefor:error:)-9ryr0","title":"func peripheral(CBMPeripheral, didUpdateNotificationStateFor: CBMCharacteristic, error: Error?)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:didupdatevaluefor:error:)-2bu3j","title":"func peripheral(CBMPeripheral, didUpdateValueFor: CBMDescriptor, error: Error?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:didupdatevaluefor:error:)-62302","title":"func peripheral(CBMPeripheral, didUpdateValueFor: CBMCharacteristic, error: Error?)","type":"method"}],"title":"CBMPeripheralDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:didupdatevaluefor:error:)-2xce0","title":"func peripheral(CBMPeripheral, didUpdateValueFor: CBMCharacteristic, error: Error?)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:didupdatevaluefor:error:)-2bu3j","title":"func peripheral(CBMPeripheral, didUpdateValueFor: CBMDescriptor, error: Error?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:didupdatevaluefor:error:)-62302","title":"func peripheral(CBMPeripheral, didUpdateValueFor: CBMCharacteristic, error: Error?)","type":"method"}],"title":"CBMPeripheralDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:didupdatevaluefor:error:)-73y6k","title":"func peripheral(CBMPeripheral, didUpdateValueFor: CBMDescriptor, error: Error?)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:didwritevaluefor:error:)-2aalw","title":"func peripheral(CBMPeripheral, didWriteValueFor: CBMDescriptor, error: Error?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:didwritevaluefor:error:)-3ghoi","title":"func peripheral(CBMPeripheral, didWriteValueFor: CBMCharacteristic, error: Error?)","type":"method"}],"title":"CBMPeripheralDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:didwritevaluefor:error:)-86kdv","title":"func peripheral(CBMPeripheral, didWriteValueFor: CBMCharacteristic, error: Error?)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:didwritevaluefor:error:)-3ghoi","title":"func peripheral(CBMPeripheral, didWriteValueFor: CBMCharacteristic, error: Error?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:didwritevaluefor:error:)-2aalw","title":"func peripheral(CBMPeripheral, didWriteValueFor: CBMDescriptor, error: Error?)","type":"method"}],"title":"CBMPeripheralDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheral(_:didwritevaluefor:error:)-90cp","title":"func peripheral(CBMPeripheral, didWriteValueFor: CBMDescriptor, error: Error?)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheraldidupdatename(_:)-klf8","title":"func peripheralDidUpdateName(CBMPeripheral)","type":"method"}],"title":"CBMPeripheralDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheraldidupdatename(_:)-4r9dx","title":"func peripheralDidUpdateName(CBMPeripheral)","type":"method"},{"children":[{"children":[{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheralisready(tosendwritewithoutresponse:)-2cz0i","title":"func peripheralIsReady(toSendWriteWithoutResponse: CBMPeripheral)","type":"method"}],"title":"CBMPeripheralDelegate Implementations","type":"groupMarker"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate\/peripheralisready(tosendwritewithoutresponse:)-1nvtl","title":"func peripheralIsReady(toSendWriteWithoutResponse: CBMPeripheral)","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegate","title":"CBMPeripheralDelegate","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/diddiscovercharacteristics","title":"var didDiscoverCharacteristics: ((CBMPeripheral, CBMService, Error?) -> ())?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/diddiscoverdescriptors","title":"var didDiscoverDescriptors: ((CBMPeripheral, CBMCharacteristic, Error?) -> ())?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/diddiscoverincludedservices","title":"var didDiscoverIncludedServices: ((CBMPeripheral, CBMService, Error?) -> ())?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/diddiscoverservices","title":"var didDiscoverServices: ((CBMPeripheral, Error?) -> ())?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/didmodifyservices","title":"var didModifyServices: ((CBMPeripheral, [CBMService]) -> ())?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/didreadrssi","title":"var didReadRSSI: ((CBMPeripheral, NSNumber, Error?) -> ())?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/didupdatecharacteristicvalue","title":"var didUpdateCharacteristicValue: ((CBMPeripheral, CBMCharacteristic, Error?) -> ())?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/didupdatedescriptorvalue","title":"var didUpdateDescriptorValue: ((CBMPeripheral, CBMDescriptor, Error?) -> ())?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/didupdatename","title":"var didUpdateName: ((CBMPeripheral) -> ())?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/didupdatenotificationstate","title":"var didUpdateNotificationState: ((CBMPeripheral, CBMCharacteristic, Error?) -> ())?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/didwritecharacteristicvalue","title":"var didWriteCharacteristicValue: ((CBMPeripheral, CBMCharacteristic, Error?) -> ())?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/didwritedescriptorvalue","title":"var didWriteDescriptorValue: ((CBMPeripheral, CBMDescriptor, Error?) -> ())?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/isreadytosendwritewithoutresponse","title":"var isReadyToSendWriteWithoutResponse: ((CBMPeripheral) -> ())?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/peripheral(_:diddiscovercharacteristicsfor:error:)","title":"func peripheral(CBMPeripheral, didDiscoverCharacteristicsFor: CBMService, error: Error?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/peripheral(_:diddiscoverdescriptorsfor:error:)","title":"func peripheral(CBMPeripheral, didDiscoverDescriptorsFor: CBMCharacteristic, error: Error?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/peripheral(_:diddiscoverincludedservicesfor:error:)","title":"func peripheral(CBMPeripheral, didDiscoverIncludedServicesFor: CBMService, error: Error?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/peripheral(_:diddiscoverservices:)","title":"func peripheral(CBMPeripheral, didDiscoverServices: Error?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/peripheral(_:didmodifyservices:)","title":"func peripheral(CBMPeripheral, didModifyServices: [CBMService])","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/peripheral(_:didreadrssi:error:)","title":"func peripheral(CBMPeripheral, didReadRSSI: NSNumber, error: Error?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/peripheral(_:didupdatenotificationstatefor:error:)","title":"func peripheral(CBMPeripheral, didUpdateNotificationStateFor: CBMCharacteristic, error: Error?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/peripheral(_:didupdatevaluefor:error:)-6bw1b","title":"func peripheral(CBMPeripheral, didUpdateValueFor: CBMDescriptor, error: Error?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/peripheral(_:didupdatevaluefor:error:)-88um0","title":"func peripheral(CBMPeripheral, didUpdateValueFor: CBMCharacteristic, error: Error?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/peripheral(_:didwritevaluefor:error:)-2fdon","title":"func peripheral(CBMPeripheral, didWriteValueFor: CBMDescriptor, error: Error?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/peripheral(_:didwritevaluefor:error:)-9twsk","title":"func peripheral(CBMPeripheral, didWriteValueFor: CBMCharacteristic, error: Error?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/peripheraldidupdatename(_:)","title":"func peripheralDidUpdateName(CBMPeripheral)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/peripheralisready(tosendwritewithoutresponse:)","title":"func peripheralIsReady(toSendWriteWithoutResponse: CBMPeripheral)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/peripheral(_:didopen:error:)","title":"func peripheral(CBMPeripheral, didOpen: CBML2CAPChannel?, error: Error?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/peripheral(_:didupdatevaluefor:error:)-7ocld","title":"func peripheral(CBMPeripheral, didUpdateValueFor: CBMDescriptor, error: Error?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/peripheral(_:didupdatevaluefor:error:)-nw91","title":"func peripheral(CBMPeripheral, didUpdateValueFor: CBMCharacteristic, error: Error?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/peripheral(_:didwritevaluefor:error:)-2gkk4","title":"func peripheral(CBMPeripheral, didWriteValueFor: CBMCharacteristic, error: Error?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/peripheral(_:didwritevaluefor:error:)-eh78","title":"func peripheral(CBMPeripheral, didWriteValueFor: CBMDescriptor, error: Error?)","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy\/cbmperipheraldelegate-implementations","title":"CBMPeripheralDelegate Implementations","type":"symbol"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxy","title":"CBMPeripheralDelegateProxy","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxywithl2capchannel\/didopenchannel","title":"var didOpenChannel: ((CBMPeripheral, CBML2CAPChannel?, Error?) -> ())?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxywithl2capchannel\/peripheral(_:didopen:error:)","title":"func peripheral(CBMPeripheral, didOpen: CBML2CAPChannel?, error: Error?)","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheraldelegateproxywithl2capchannel","title":"CBMPeripheralDelegateProxyWithL2CAPChannel","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/ancsauthorized","title":"var ancsAuthorized: Bool","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/cansendwritewithoutresponse","title":"var canSendWriteWithoutResponse: Bool","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/delegate","title":"var delegate: CBMPeripheralDelegate?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/hash","title":"var hash: Int","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/identifier","title":"var identifier: UUID","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/name","title":"var name: String?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/services","title":"var services: [CBMService]?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/state","title":"var state: CBMPeripheralState","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/discovercharacteristics(_:for:)","title":"func discoverCharacteristics([CBMUUID]?, for: CBMService)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/discoverdescriptors(for:)","title":"func discoverDescriptors(for: CBMCharacteristic)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/discoverincludedservices(_:for:)","title":"func discoverIncludedServices([CBMUUID]?, for: CBMService)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/discoverservices(_:)","title":"func discoverServices([CBMUUID]?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/maximumwritevaluelength(for:)","title":"func maximumWriteValueLength(for: CBMCharacteristicWriteType) -> Int","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/openl2capchannel(_:)","title":"func openL2CAPChannel(CBML2CAPPSM)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/readrssi()","title":"func readRSSI()","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/readvalue(for:)-29us6","title":"func readValue(for: CBMCharacteristic)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/readvalue(for:)-9on43","title":"func readValue(for: CBMDescriptor)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/setnotifyvalue(_:for:)","title":"func setNotifyValue(Bool, for: CBMCharacteristic)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/writevalue(_:for:)","title":"func writeValue(Data, for: CBMDescriptor)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock\/writevalue(_:for:type:)","title":"func writeValue(Data, for: CBMCharacteristic, type: CBMCharacteristicWriteType)","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralmock","title":"CBMPeripheralMock","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/ancsauthorized","title":"var ancsAuthorized: Bool","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/cansendwritewithoutresponse","title":"var canSendWriteWithoutResponse: Bool","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/delegate","title":"var delegate: CBMPeripheralDelegate?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/hash","title":"var hash: Int","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/identifier","title":"var identifier: UUID","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/name","title":"var name: String?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/peripheral","title":"let peripheral: CBPeripheral","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/services","title":"var services: [CBMService]?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/state","title":"var state: CBMPeripheralState","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/discovercharacteristics(_:for:)","title":"func discoverCharacteristics([CBMUUID]?, for: CBMService)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/discoverdescriptors(for:)","title":"func discoverDescriptors(for: CBMCharacteristic)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/discoverincludedservices(_:for:)","title":"func discoverIncludedServices([CBMUUID]?, for: CBMService)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/discoverservices(_:)","title":"func discoverServices([CBMUUID]?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/maximumwritevaluelength(for:)","title":"func maximumWriteValueLength(for: CBMCharacteristicWriteType) -> Int","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/openl2capchannel(_:)","title":"func openL2CAPChannel(CBML2CAPPSM)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/readrssi()","title":"func readRSSI()","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/readvalue(for:)-65lsz","title":"func readValue(for: CBMDescriptor)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/readvalue(for:)-b1qu","title":"func readValue(for: CBMCharacteristic)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/setnotifyvalue(_:for:)","title":"func setNotifyValue(Bool, for: CBMCharacteristic)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/writevalue(_:for:)","title":"func writeValue(Data, for: CBMDescriptor)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative\/writevalue(_:for:type:)","title":"func writeValue(Data, for: CBMCharacteristic, type: CBMCharacteristicWriteType)","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralnative","title":"CBMPeripheralNative","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview\/init(_:state:)","title":"init(CBMPeripheralSpec, state: CBMPeripheralState)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview\/ancsauthorized","title":"let ancsAuthorized: Bool","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview\/cansendwritewithoutresponse","title":"let canSendWriteWithoutResponse: Bool","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview\/delegate","title":"var delegate: CBMPeripheralDelegate?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview\/identifier","title":"let identifier: UUID","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview\/name","title":"var name: String?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview\/services","title":"var services: [CBMService]?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview\/state","title":"var state: CBMPeripheralState","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview\/discovercharacteristics(_:for:)","title":"func discoverCharacteristics([CBMUUID]?, for: CBMService)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview\/discoverdescriptors(for:)","title":"func discoverDescriptors(for: CBMCharacteristic)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview\/discoverincludedservices(_:for:)","title":"func discoverIncludedServices([CBMUUID]?, for: CBMService)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview\/discoverservices(_:)","title":"func discoverServices([CBMUUID]?)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview\/maximumwritevaluelength(for:)","title":"func maximumWriteValueLength(for: CBMCharacteristicWriteType) -> Int","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview\/openl2capchannel(_:)","title":"func openL2CAPChannel(CBML2CAPPSM)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview\/readrssi()","title":"func readRSSI()","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview\/readvalue(for:)-5cb2u","title":"func readValue(for: CBMCharacteristic)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview\/readvalue(for:)-kuta","title":"func readValue(for: CBMDescriptor)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview\/setnotifyvalue(_:for:)","title":"func setNotifyValue(Bool, for: CBMCharacteristic)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview\/writevalue(_:for:)","title":"func writeValue(Data, for: CBMDescriptor)","type":"method"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview\/writevalue(_:for:type:)","title":"func writeValue(Data, for: CBMCharacteristic, type: CBMCharacteristicWriteType)","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmperipheralpreview","title":"CBMPeripheralPreview","type":"class"},{"path":"\/documentation\/corebluetoothmock\/cbmperipheralstate","title":"CBMPeripheralState","type":"typealias"},{"path":"\/documentation\/corebluetoothmock\/cbml2cappsm","title":"CBML2CAPPSM","type":"typealias"},{"path":"\/documentation\/corebluetoothmock\/cbml2capchannel","title":"CBML2CAPChannel","type":"typealias"},{"title":"Peripheral Connection Options","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmconnectperipheraloptionenableautoreconnect","title":"let CBMConnectPeripheralOptionEnableAutoReconnect: String","type":"var"},{"path":"\/documentation\/corebluetoothmock\/cbmconnectperipheraloptionnotifyonconnectionkey","title":"let CBMConnectPeripheralOptionNotifyOnConnectionKey: String","type":"var"},{"path":"\/documentation\/corebluetoothmock\/cbmconnectperipheraloptionnotifyondisconnectionkey","title":"let CBMConnectPeripheralOptionNotifyOnDisconnectionKey: String","type":"var"},{"path":"\/documentation\/corebluetoothmock\/cbmconnectperipheraloptionnotifyonnotificationkey","title":"let CBMConnectPeripheralOptionNotifyOnNotificationKey: String","type":"var"},{"path":"\/documentation\/corebluetoothmock\/cbmconnectperipheraloptionenabletransportbridgingkey","title":"let CBMConnectPeripheralOptionEnableTransportBridgingKey: String","type":"var"},{"path":"\/documentation\/corebluetoothmock\/cbmconnectperipheraloptionrequiresancs","title":"let CBMConnectPeripheralOptionRequiresANCS: String","type":"var"},{"path":"\/documentation\/corebluetoothmock\/cbmconnectperipheraloptionstartdelaykey","title":"let CBMConnectPeripheralOptionStartDelayKey: String","type":"var"},{"title":"Attributes","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmattribute","title":"CBMAttribute","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmservice\/characteristics","title":"var characteristics: [CBMCharacteristic]?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmservice\/includedservices","title":"var includedServices: [CBMService]?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmservice\/isprimary","title":"var isPrimary: Bool","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmservice\/peripheral","title":"var peripheral: CBMPeripheral?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmservice\/uuid","title":"var uuid: CBMUUID","type":"property"}],"path":"\/documentation\/corebluetoothmock\/cbmservice","title":"CBMService","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmservicemock\/init(type:primary:includedservices:characteristics:)-13qta","title":"init(type: CBMUUID, primary: Bool, includedServices: [CBMServiceMock]?, characteristics: [CBMCharacteristicMock]?)","type":"init"},{"path":"\/documentation\/corebluetoothmock\/cbmservicemock\/init(type:primary:includedservices:characteristics:)-4pm0j","title":"init(type: CBMUUID, primary: Bool, includedServices: CBMServiceMock..., characteristics: CBMCharacteristicMock...)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmservicemock\/isequal(_:)","title":"func isEqual(Any?) -> Bool","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmservicemock","title":"CBMServiceMock","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcharacteristic\/descriptors","title":"var descriptors: [CBMDescriptor]?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmcharacteristic\/isnotifying","title":"var isNotifying: Bool","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmcharacteristic\/properties","title":"let properties: CBMCharacteristicProperties","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmcharacteristic\/service","title":"var service: CBMService?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmcharacteristic\/uuid","title":"var uuid: CBMUUID","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmcharacteristic\/value","title":"var value: Data?","type":"property"}],"path":"\/documentation\/corebluetoothmock\/cbmcharacteristic","title":"CBMCharacteristic","type":"class"},{"path":"\/documentation\/corebluetoothmock\/cbmcharacteristicwritetype","title":"CBMCharacteristicWriteType","type":"typealias"},{"path":"\/documentation\/corebluetoothmock\/cbmcharacteristicproperties","title":"CBMCharacteristicProperties","type":"typealias"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcharacteristicmock\/init(type:properties:descriptors:)","title":"init(type: CBMUUID, properties: CBMCharacteristicProperties, descriptors: CBMDescriptorMock...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcharacteristicmock\/descriptors","title":"var descriptors: [CBMDescriptor]?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcharacteristicmock\/isequal(_:)","title":"func isEqual(Any?) -> Bool","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmcharacteristicmock","title":"CBMCharacteristicMock","type":"class"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmdescriptor\/characteristic","title":"var characteristic: CBMCharacteristic?","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmdescriptor\/uuid","title":"var uuid: CBMUUID","type":"property"},{"path":"\/documentation\/corebluetoothmock\/cbmdescriptor\/value","title":"var value: Any?","type":"property"}],"path":"\/documentation\/corebluetoothmock\/cbmdescriptor","title":"CBMDescriptor","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmdescriptormock\/init(type:)","title":"init(type: CBMUUID)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmdescriptormock\/isequal(_:)","title":"func isEqual(Any?) -> Bool","type":"method"}],"path":"\/documentation\/corebluetoothmock\/cbmdescriptormock","title":"CBMDescriptorMock","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmclientcharacteristicconfigurationdescriptormock\/init()","title":"init()","type":"init"}],"path":"\/documentation\/corebluetoothmock\/cbmclientcharacteristicconfigurationdescriptormock","title":"CBMClientCharacteristicConfigurationDescriptorMock","type":"class"},{"path":"\/documentation\/corebluetoothmock\/cbmcccdescriptormock","title":"CBMCCCDescriptorMock","type":"typealias"},{"title":"Scanning options","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerscanoptionallowduplicateskey","title":"let CBMCentralManagerScanOptionAllowDuplicatesKey: String","type":"var"},{"path":"\/documentation\/corebluetoothmock\/cbmcentralmanagerscanoptionsolicitedserviceuuidskey","title":"let CBMCentralManagerScanOptionSolicitedServiceUUIDsKey: String","type":"var"},{"title":"Advertisement Data Retrieval Keys","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmadvertisementdatalocalnamekey","title":"let CBMAdvertisementDataLocalNameKey: String","type":"var"},{"path":"\/documentation\/corebluetoothmock\/cbmadvertisementdatamanufacturerdatakey","title":"let CBMAdvertisementDataManufacturerDataKey: String","type":"var"},{"path":"\/documentation\/corebluetoothmock\/cbmadvertisementdataservicedatakey","title":"let CBMAdvertisementDataServiceDataKey: String","type":"var"},{"path":"\/documentation\/corebluetoothmock\/cbmadvertisementdataserviceuuidskey","title":"let CBMAdvertisementDataServiceUUIDsKey: String","type":"var"},{"path":"\/documentation\/corebluetoothmock\/cbmadvertisementdataoverflowserviceuuidskey","title":"let CBMAdvertisementDataOverflowServiceUUIDsKey: String","type":"var"},{"path":"\/documentation\/corebluetoothmock\/cbmadvertisementdatatxpowerlevelkey","title":"let CBMAdvertisementDataTxPowerLevelKey: String","type":"var"},{"path":"\/documentation\/corebluetoothmock\/cbmadvertisementdataisconnectable","title":"let CBMAdvertisementDataIsConnectable: String","type":"var"},{"path":"\/documentation\/corebluetoothmock\/cbmadvertisementdatasolicitedserviceuuidskey","title":"let CBMAdvertisementDataSolicitedServiceUUIDsKey: String","type":"var"},{"title":"Other","type":"groupMarker"},{"path":"\/documentation\/corebluetoothmock\/cbmuuid","title":"CBMUUID","type":"typealias"},{"path":"\/documentation\/corebluetoothmock\/cbmerror","title":"CBMError","type":"typealias"},{"path":"\/documentation\/corebluetoothmock\/cbmatterror","title":"CBMATTError","type":"typealias"}],"path":"\/documentation\/corebluetoothmock","title":"CoreBluetoothMock","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}